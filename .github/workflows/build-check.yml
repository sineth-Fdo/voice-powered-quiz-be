name: NestJS Build Check

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: npm install -g pnpm@9.15.4

      - name: Install dependencies 📦 
        run: pnpm install

      - name: Build the NestJS project 🛠️
        run: pnpm build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:${{ github.sha }} .

      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:latest

      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:latest

      - name: Update v1.0 tag
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0
          docker push ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ec2-16-171-16-255.eu-north-1.compute.amazonaws.com
          USER: ubuntu
        
        run: |
          # Debug SSH directory
          mkdir -p ~/.ssh
          
          # Write key with proper formatting
          echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add host to known hosts
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
          
          # Test SSH connection
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $USER@$HOST echo "SSH connection successful"
          
          # Deploy commands
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
            # Stop existing containers
            docker stop $(docker ps -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0) || true
            docker rm $(docker ps -a -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0) || true
            
            # Pull and run new container
            docker pull ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0
            docker run -d -p 8080:8080 \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e MONGO_URI=${{ secrets.MONGO_URI }} \
              ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0
          EOF



  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Deploy to EC2
  #       env:
  #         SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

  #       run: |

  #           # Save the SSH key to a file and set appropriate permissions
  #           echo "$SSH_KEY" > $GITHUB_WORKSPACE/coffeeshopkey.pem
  #           chmod 400 $GITHUB_WORKSPACE/coffeeshopkey.pem

  #           # Deploy the app to EC2 instance
  #           ssh -o StrictHostKeyChecking=no -i $GITHUB_WORKSPACE/coffeeshopkey.pem ubuntu@ec2-16-171-16-255.eu-north-1.compute.amazonaws.com << EOF
          
  #             # Stop, remove, and clean up old containers/images
  #             docker stop \$(docker ps -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0) || true
  #             docker rm \$(docker ps -a -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0) || true
  #             docker rmi \$(docker images -q --filter reference=${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0) || true

  #             # Pull the latest image
  #             docker pull ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0

  #             # Stop the running container and start a new one
  #             docker stop \$(docker ps -q --filter ancestor=${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0) || true
  #             docker run -d -p 8080:8080 \
  #               -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
  #               -e MONGO_URI=${{ secrets.MONGO_URI }} \
  #             ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-be:v1.0
  #           EOF